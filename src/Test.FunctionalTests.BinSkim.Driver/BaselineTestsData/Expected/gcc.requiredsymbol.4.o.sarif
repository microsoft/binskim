{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "results": [
        {
          "ruleId": "BA3001",
          "ruleIndex": 0,
          "kind": "pass",
          "level": "none",
          "message": {
            "id": "Pass_Executable",
            "arguments": [
              "gcc.requiredsymbol.4.o"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/gcc.requiredsymbol.4.o",
                  "index": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA3002",
          "ruleIndex": 1,
          "kind": "pass",
          "level": "none",
          "message": {
            "id": "Pass",
            "arguments": [
              "gcc.requiredsymbol.4.o"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/gcc.requiredsymbol.4.o",
                  "index": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA3003",
          "ruleIndex": 2,
          "kind": "pass",
          "level": "none",
          "message": {
            "id": "Pass",
            "arguments": [
              "gcc.requiredsymbol.4.o"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/gcc.requiredsymbol.4.o",
                  "index": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA3004",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "id": "Error",
            "arguments": [
              "gcc.requiredsymbol.4.o",
              "4"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/gcc.requiredsymbol.4.o",
                  "index": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA3005",
          "ruleIndex": 4,
          "kind": "pass",
          "level": "none",
          "message": {
            "id": "Pass",
            "arguments": [
              "gcc.requiredsymbol.4.o"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/gcc.requiredsymbol.4.o",
                  "index": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA3006",
          "ruleIndex": 5,
          "kind": "pass",
          "level": "none",
          "message": {
            "id": "Pass",
            "arguments": [
              "gcc.requiredsymbol.4.o"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/gcc.requiredsymbol.4.o",
                  "index": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA3010",
          "ruleIndex": 6,
          "kind": "pass",
          "level": "none",
          "message": {
            "id": "Pass",
            "arguments": [
              "gcc.requiredsymbol.4.o"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/gcc.requiredsymbol.4.o",
                  "index": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA3011",
          "ruleIndex": 7,
          "kind": "pass",
          "level": "none",
          "message": {
            "id": "Pass",
            "arguments": [
              "gcc.requiredsymbol.4.o"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/gcc.requiredsymbol.4.o",
                  "index": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA3030",
          "ruleIndex": 8,
          "kind": "pass",
          "level": "none",
          "message": {
            "id": "Pass_NoCheckableFunctions",
            "arguments": [
              "gcc.requiredsymbol.4.o"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/gcc.requiredsymbol.4.o",
                  "index": 0
                }
              }
            }
          ]
        }
      ],
      "tool": {
        "driver": {
          "name": "testhost",
          "version": "15.0.0.0",
          "rules": [
            {
              "id": "BA3001",
              "name": "EnablePositionIndependentExecutable",
              "fullDescription": {
                "text": "A Position Independent Executable (PIE) relocates all of its sections at load time, including the code section, if ASLR is enabled in the Linux kernel (instead of just the stack/heap). This makes ROP-style attacks more difficult. This can be enabled by passing '-f pie' to clang/gcc."
              },
              "help": {
                "text": "A Position Independent Executable (PIE) relocates all of its sections at load time, including the code section, if ASLR is enabled in the Linux kernel (instead of just the stack/heap). This makes ROP-style attacks more difficult. This can be enabled by passing '-f pie' to clang/gcc."
              },
              "messageStrings": {
                "Pass_Executable": {
                  "text": "PIE enabled on executable '{0}'."
                },
                "Pass_Library": {
                  "text": "'{0}' is a shared object library rather than an executable, and is automatically position independent."
                },
                "Error": {
                  "text": "PIE disabled on executable '{0}'.  This means the code section will always be loaded to the same address, even if ASLR is enabled in the Linux kernel.  To address this, ensure you are compiling with '-fpie' when using clang/gcc."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3001EnablePositionIndependentExecutable"
            },
            {
              "id": "BA3002",
              "name": "DoNotMarkStackAsExecutable",
              "fullDescription": {
                "text": "This checks if a binary has an executable stack; an executable stack allows attackers to redirect code flow into stack memory, which is an easy place for an attacker to store shellcode. Ensure you are compiling with '-z noexecstack' to mark the stack as non-executable."
              },
              "help": {
                "text": "This checks if a binary has an executable stack; an executable stack allows attackers to redirect code flow into stack memory, which is an easy place for an attacker to store shellcode. Ensure you are compiling with '-z noexecstack' to mark the stack as non-executable."
              },
              "messageStrings": {
                "Pass": {
                  "text": "GNU_STACK segment marked as non-executable on '{0}'."
                },
                "Error_StackExec": {
                  "text": "Stack on '{0}' is executable, which means that an attacker could use it as a place to store attack shellcode.  Ensure you are compiling with '-z noexecstack' to mark the stack as non-executable."
                },
                "Error_NoStackSeg": {
                  "text": "GNU_STACK segment on '{0}' is missing, which means the stack will likely be loaded as executable.  Ensure you are using an up to date compiler and passing '-z noexecstack' to the compiler."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3002DoNotMarkStackAsExecutable"
            },
            {
              "id": "BA3003",
              "name": "EnableStackProtector",
              "fullDescription": {
                "text": "The stack protector ensures that all functions that use buffers over a certain size will use a stack cookie (and check it) to prevent stack based buffer overflows, exiting if stack smashing is detected. Use '--fstack-protector-strong' (all buffers of 4 bytes or more) or '--fstack-protector-all' (all functions) to enable this."
              },
              "help": {
                "text": "The stack protector ensures that all functions that use buffers over a certain size will use a stack cookie (and check it) to prevent stack based buffer overflows, exiting if stack smashing is detected. Use '--fstack-protector-strong' (all buffers of 4 bytes or more) or '--fstack-protector-all' (all functions) to enable this."
              },
              "messageStrings": {
                "Pass": {
                  "text": "Stack protector was found on '{0}'.  However, if you are not compiling with '--stack-protector-strong', it may provide additional protections."
                },
                "Error": {
                  "text": "The stack protector was not found in '{0}'. This may be because '--stack-protector-strong' was not used, or because it was explicitly disabled by '-fno-stack-protectors'.\r\nModules did not meet the criteria: {1}"
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3003EnableStackProtector"
            },
            {
              "id": "BA3004",
              "name": "GenerateRequiredSymbolFormat",
              "fullDescription": {
                "text": "This check ensures that debugging dwarf version used is 5. The dwarf version 5 contains more information and should be used. Use the compiler flags '-gdwarf-5' to enable this."
              },
              "help": {
                "text": "This check ensures that debugging dwarf version used is 5. The dwarf version 5 contains more information and should be used. Use the compiler flags '-gdwarf-5' to enable this."
              },
              "messageStrings": {
                "Pass": {
                  "text": "The version of the debugging dwarf format is '{0}' for the file '{1}'"
                },
                "Error": {
                  "text": "'{0}' is using debugging dwarf version '{1}'. The dwarf version 5 contains more information and should be used. To enable the debugging version 5 use '-gdwarf-5'."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3004GenerateRequiredSymbolFormat"
            },
            {
              "id": "BA3005",
              "name": "EnableStackClashProtection",
              "fullDescription": {
                "text": "This check ensures that stack clash protection is enabled. Each program running on a computer uses a special memory region called the stack. This memory region is special because it grows automatically when the program needs more stack memory. But if it grows too much and gets too close to another memory region, the program may confuse the stack with the other memory region. An attacker can exploit this confusion to overwrite the stack with the other memory region, or the other way around. Use the compiler flags '-fstack-clash-protection' to enable this."
              },
              "help": {
                "text": "This check ensures that stack clash protection is enabled. Each program running on a computer uses a special memory region called the stack. This memory region is special because it grows automatically when the program needs more stack memory. But if it grows too much and gets too close to another memory region, the program may confuse the stack with the other memory region. An attacker can exploit this confusion to overwrite the stack with the other memory region, or the other way around. Use the compiler flags '-fstack-clash-protection' to enable this."
              },
              "messageStrings": {
                "Pass": {
                  "text": "The Stack Clash Protection was present, so '{0}' is protected."
                },
                "Error": {
                  "text": "The Stack Clash Protection is missing from this binary, so the stack from '{0}' can clash/colide with another memory region. Ensure you are compiling with the compiler flags '-fstack-clash-protection' to address this.\r\nModules did not meet the criteria: {1}"
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3005EnableStackClashProtection"
            },
            {
              "id": "BA3006",
              "name": "EnableNonExecutableStack",
              "fullDescription": {
                "text": "This check ensures that non-executable stack is enabled. A common type of exploit is the stack buffer overflow. An application receives, from an attacker, more data than it is prepared for and stores this information on its stack, writing beyond the space reserved for it. This can be designed to cause execution of the data written on the stack. One mechanism to mitigate this vulnerability is for the system to not allow the execution of instructions in sections of memory identified as part of the stack. Use the compiler flags '-z noexecstack' to enable this."
              },
              "help": {
                "text": "This check ensures that non-executable stack is enabled. A common type of exploit is the stack buffer overflow. An application receives, from an attacker, more data than it is prepared for and stores this information on its stack, writing beyond the space reserved for it. This can be designed to cause execution of the data written on the stack. One mechanism to mitigate this vulnerability is for the system to not allow the execution of instructions in sections of memory identified as part of the stack. Use the compiler flags '-z noexecstack' to enable this."
              },
              "messageStrings": {
                "Pass": {
                  "text": "The non-executable stack flag was present, so '{0}' is protected."
                },
                "Error": {
                  "text": "The non-executable stack is not enabled for this binary, so '{0}' can have a vulnerability of execution of the data written on the stack. Ensure you are compiling with the flag '-z noexecstack' to address this."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3006EnableNonExecutableStack"
            },
            {
              "id": "BA3010",
              "name": "EnableReadOnlyRelocations",
              "fullDescription": {
                "text": "This check ensures that some relocation data is marked as read only after the executable is loaded, and moved below the '.data' section in memory. This prevents them from being overwritten, which can redirect control flow. Use the compiler flags '-Wl,z,relro' to enable this."
              },
              "help": {
                "text": "This check ensures that some relocation data is marked as read only after the executable is loaded, and moved below the '.data' section in memory. This prevents them from being overwritten, which can redirect control flow. Use the compiler flags '-Wl,z,relro' to enable this."
              },
              "messageStrings": {
                "Pass": {
                  "text": "The GNU_RELRO segment was present, so '{0}' is protected."
                },
                "Error": {
                  "text": "The GNU_RELRO segment is missing from this binary, so relocation sections in '{0}' will not be marked as read only after the binary is loaded.  An attacker can overwrite these to redirect control flow.  Ensure you are compiling with the compiler flags '-Wl,z,relro' to address this."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3010EnableReadOnlyRelocations"
            },
            {
              "id": "BA3011",
              "name": "EnableBindNow",
              "fullDescription": {
                "text": "This check ensures that some relocation data is marked as read only after the executable is loaded, and moved below the '.data' section in memory. This prevents them from being overwritten, which can redirect control flow. Use the compiler flags '-Wl,z,now' to enable this."
              },
              "help": {
                "text": "This check ensures that some relocation data is marked as read only after the executable is loaded, and moved below the '.data' section in memory. This prevents them from being overwritten, which can redirect control flow. Use the compiler flags '-Wl,z,now' to enable this."
              },
              "messageStrings": {
                "Pass": {
                  "text": "The BIND_NOW flag was present, so '{0}' is protected."
                },
                "Error": {
                  "text": "The BIND_NOW flag is missing from this binary, so relocation sections in '{0}' will not be marked as read only after the binary is loaded.  An attacker can overwrite these to redirect control flow.  Ensure you are compiling with the compiler flags '-Wl,z,now' to address this."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3011EnableBindNow"
            },
            {
              "id": "BA3030",
              "name": "UseCheckedFunctionsWithGcc",
              "fullDescription": {
                "text": "GCC can automatically replace unsafe functions with checked variants when it can statically determine the length of a buffer or string. In the case of an overflow, the checked version will safely exit the program (rather than potentially allowing an exploit). This feature can be enabled by passing '-DFortify_Source=2' when optimization level 2 is enabled ('-O2')."
              },
              "help": {
                "text": "GCC can automatically replace unsafe functions with checked variants when it can statically determine the length of a buffer or string. In the case of an overflow, the checked version will safely exit the program (rather than potentially allowing an exploit). This feature can be enabled by passing '-DFortify_Source=2' when optimization level 2 is enabled ('-O2')."
              },
              "messageStrings": {
                "Pass_AllFunctionsChecked": {
                  "text": "All functions that can be checked in '{0}' are using the checked versions, so this binary is protected from overflows caused by those function's use."
                },
                "Pass_SomeFunctionsChecked": {
                  "text": "Some checked functions were found in '{0}'; however, there were also some unchecked functions, which can occur when the compiler cannot statically determine the length of a buffer/string.  We recommend reviewing your usage of functions like memcpy or strcpy."
                },
                "Pass_NoCheckableFunctions": {
                  "text": "No unsafe functions which can be replaced with checked versions are used in '{0}'."
                },
                "Error": {
                  "text": "No checked functions are present/used when compiling '{0}', and it was compiled with GCC--and it uses functions that can be checked. The Fortify Source flag replaces some unsafe functions with checked versions when a static length can be determined, and can be enabled by passing '-D_FORTIFY_SOURCE=2' when optimization level 2 ('-O2') is enabled.  It is possible that the flag was passed, but that the compiler could not statically determine the length of any buffers/strings."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3030UseCheckedFunctionsWithGcc"
            }
          ],
          "properties": {
            "Comments": "A security and correctness analyzer for portable executable and MSIL formats."
          }
        }
      },
      "invocations": [
        {
          "executionSuccessful": true
        }
      ],
      "artifacts": [
        {
          "location": {
            "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/gcc.requiredsymbol.4.o"
          },
          "hashes": {
            "md5": "CD440A878A783FD3465B10332A0C9D27",
            "sha-1": "2B4AA452DD15B01C86CB22FF05F86B47AA2D0406",
            "sha-256": "2BDD9659D2FE35257EB5B2B18980E7C50A66B08AEC1BEDB6D1FD7995C2C16DDB"
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}