{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "results": [
        {
          "ruleId": "BA3001",
          "ruleIndex": 0,
          "kind": "pass",
          "level": "none",
          "message": {
            "id": "Pass_Library",
            "arguments": [
              "clang.stack_protector.so"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestData/clang.stack_protector.so",
                  "index": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA3002",
          "ruleIndex": 1,
          "kind": "pass",
          "level": "none",
          "message": {
            "id": "Pass",
            "arguments": [
              "clang.stack_protector.so"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestData/clang.stack_protector.so",
                  "index": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA3006",
          "ruleIndex": 2,
          "kind": "pass",
          "level": "none",
          "message": {
            "id": "Pass",
            "arguments": [
              "clang.stack_protector.so"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestData/clang.stack_protector.so",
                  "index": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA3010",
          "ruleIndex": 3,
          "kind": "pass",
          "level": "none",
          "message": {
            "id": "Pass",
            "arguments": [
              "clang.stack_protector.so"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestData/clang.stack_protector.so",
                  "index": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA3011",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "id": "Error",
            "arguments": [
              "clang.stack_protector.so"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestData/clang.stack_protector.so",
                  "index": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA3031",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "id": "Error",
            "arguments": [
              "clang.stack_protector.so"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestData/clang.stack_protector.so",
                  "index": 0
                }
              }
            }
          ]
        }
      ],
      "tool": {
        "driver": {
          "name": "testhost",
          "version": "15.0.0.0",
          "rules": [
            {
              "id": "BA3001",
              "name": "EnablePositionIndependentExecutable",
              "fullDescription": {
                "text": "A Position Independent Executable (PIE) relocates all of its sections at load time, including the code section, if ASLR is enabled in the Linux kernel (instead of just the stack/heap). This makes ROP-style attacks more difficult. This can be enabled by passing '-f pie' to clang/gcc."
              },
              "help": {
                "text": "A Position Independent Executable (PIE) relocates all of its sections at load time, including the code section, if ASLR is enabled in the Linux kernel (instead of just the stack/heap). This makes ROP-style attacks more difficult. This can be enabled by passing '-f pie' to clang/gcc."
              },
              "messageStrings": {
                "Pass_Executable": {
                  "text": "PIE enabled on executable '{0}'."
                },
                "Pass_Library": {
                  "text": "'{0}' is a shared object library rather than an executable, and is automatically position independent."
                },
                "Error": {
                  "text": "PIE disabled on executable '{0}'.  This means the code section will always be loaded to the same address, even if ASLR is enabled in the Linux kernel.  To address this, ensure you are compiling with '-fpie' when using clang/gcc."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3001EnablePositionIndependentExecutable"
            },
            {
              "id": "BA3002",
              "name": "DoNotMarkStackAsExecutable",
              "fullDescription": {
                "text": "This checks if a binary has an executable stack; an executable stack allows attackers to redirect code flow into stack memory, which is an easy place for an attacker to store shellcode. Ensure you are compiling with '-z noexecstack' to mark the stack as non-executable."
              },
              "help": {
                "text": "This checks if a binary has an executable stack; an executable stack allows attackers to redirect code flow into stack memory, which is an easy place for an attacker to store shellcode. Ensure you are compiling with '-z noexecstack' to mark the stack as non-executable."
              },
              "messageStrings": {
                "Pass": {
                  "text": "GNU_STACK segment marked as non-executable on '{0}'."
                },
                "Error_StackExec": {
                  "text": "Stack on '{0}' is executable, which means that an attacker could use it as a place to store attack shellcode.  Ensure you are compiling with '-z noexecstack' to mark the stack as non-executable."
                },
                "Error_NoStackSeg": {
                  "text": "GNU_STACK segment on '{0}' is missing, which means the stack will likely be loaded as executable.  Ensure you are using an up to date compiler and passing '-z noexecstack' to the compiler."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3002DoNotMarkStackAsExecutable"
            },
            {
              "id": "BA3006",
              "name": "EnableNonExecutableStack",
              "fullDescription": {
                "text": "This check ensures that non-executable stack is enabled. A common type of exploit is the stack buffer overflow. An application receives, from an attacker, more data than it is prepared for and stores this information on its stack, writing beyond the space reserved for it. This can be designed to cause execution of the data written on the stack. One mechanism to mitigate this vulnerability is for the system to not allow the execution of instructions in sections of memory identified as part of the stack. Use the compiler flags '-z noexecstack' to enable this."
              },
              "help": {
                "text": "This check ensures that non-executable stack is enabled. A common type of exploit is the stack buffer overflow. An application receives, from an attacker, more data than it is prepared for and stores this information on its stack, writing beyond the space reserved for it. This can be designed to cause execution of the data written on the stack. One mechanism to mitigate this vulnerability is for the system to not allow the execution of instructions in sections of memory identified as part of the stack. Use the compiler flags '-z noexecstack' to enable this."
              },
              "messageStrings": {
                "Pass": {
                  "text": "The non-executable stack flag was present, so '{0}' is protected."
                },
                "Error": {
                  "text": "The non-executable stack is not enabled for this binary, so '{0}' can have a vulnerability of execution of the data written on the stack. Ensure you are compiling with the flag '-z noexecstack' to address this."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3006EnableNonExecutableStack"
            },
            {
              "id": "BA3010",
              "name": "EnableReadOnlyRelocations",
              "fullDescription": {
                "text": "This check ensures that some relocation data is marked as read only after the executable is loaded, and moved below the '.data' section in memory. This prevents them from being overwritten, which can redirect control flow. Use the compiler flags '-Wl,z,relro' to enable this."
              },
              "help": {
                "text": "This check ensures that some relocation data is marked as read only after the executable is loaded, and moved below the '.data' section in memory. This prevents them from being overwritten, which can redirect control flow. Use the compiler flags '-Wl,z,relro' to enable this."
              },
              "messageStrings": {
                "Pass": {
                  "text": "The GNU_RELRO segment was present, so '{0}' is protected."
                },
                "Error": {
                  "text": "The GNU_RELRO segment is missing from this binary, so relocation sections in '{0}' will not be marked as read only after the binary is loaded.  An attacker can overwrite these to redirect control flow.  Ensure you are compiling with the compiler flags '-Wl,z,relro' to address this."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3010EnableReadOnlyRelocations"
            },
            {
              "id": "BA3011",
              "name": "EnableBindNow",
              "fullDescription": {
                "text": "This check ensures that some relocation data is marked as read only after the executable is loaded, and moved below the '.data' section in memory. This prevents them from being overwritten, which can redirect control flow. Use the compiler flags '-Wl,z,now' to enable this."
              },
              "help": {
                "text": "This check ensures that some relocation data is marked as read only after the executable is loaded, and moved below the '.data' section in memory. This prevents them from being overwritten, which can redirect control flow. Use the compiler flags '-Wl,z,now' to enable this."
              },
              "messageStrings": {
                "Pass": {
                  "text": "The BIND_NOW flag was present, so '{0}' is protected."
                },
                "Error": {
                  "text": "The BIND_NOW flag is missing from this binary, so relocation sections in '{0}' will not be marked as read only after the binary is loaded.  An attacker can overwrite these to redirect control flow.  Ensure you are compiling with the compiler flags '-Wl,z,now' to address this."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3011EnableBindNow"
            },
            {
              "id": "BA3031",
              "name": "EnableClangSafeStack",
              "fullDescription": {
                "text": "The SafeStack instrumentation pass protects programs by implementing two separate program stacks, one for return addresses and local variables, and the other for everything else. To enable SafeStack, pass '-fsanitize=safe-stack' flag to both compile and link command lines."
              },
              "help": {
                "text": "The SafeStack instrumentation pass protects programs by implementing two separate program stacks, one for return addresses and local variables, and the other for everything else. To enable SafeStack, pass '-fsanitize=safe-stack' flag to both compile and link command lines."
              },
              "messageStrings": {
                "Pass": {
                  "text": "'{0}' was compiled using Clang and with the SafeStack instrumentation pass, which mitigates the risk of stack-based buffer overflows."
                },
                "Error": {
                  "text": "'{0}' was compiled using Clang but without the SafeStack instrumentation pass, which should be used to mitigate the risk of stack-based buffer overflows. To enable SafeStack, pass '-fsanitize=safe-stack' flag to both compile and link command lines."
                },
                "Error_ClangVersionMayNeedUpgrade": {
                  "text": "'{0}' was compiled using Clang but without the SafeStack instrumentation pass, which should be used to mitigate the risk of stack-based buffer overflows. To enable SafeStack, pass '-fsanitize=safe-stack' flag to both compile and link command lines. You might need to update your version of Clang to enable it."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "helpUri": "https://github.com/microsoft/binskim/blob/main/docs/BinSkimRules.md#rule-BA3031EnableClangSafeStack"
            }
          ],
          "properties": {
            "Comments": "A security and correctness analyzer for portable executable and MSIL formats."
          }
        }
      },
      "invocations": [
        {
          "executionSuccessful": true
        }
      ],
      "artifacts": [
        {
          "location": {
            "uri": "file:///Z:/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestData/clang.stack_protector.so"
          },
          "hashes": {
            "md5": "C0F657C7F1869D5DFB03240F40FCB71A",
            "sha-1": "C931C314BDDBDC17AB9F6F6FDB70E138B0D2537E",
            "sha-256": "7E538027E4C287ABC1E365231ADA757B34DF39A32FEB1312DE2EF9A96A121339"
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}